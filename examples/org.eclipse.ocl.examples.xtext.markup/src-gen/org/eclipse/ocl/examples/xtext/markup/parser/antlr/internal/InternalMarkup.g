/*
* generated by Xtext
*/
grammar InternalMarkup;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.ocl.examples.xtext.markup.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.ocl.examples.xtext.markup.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.ocl.examples.xtext.markup.services.MarkupGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private MarkupGrammarAccess grammarAccess;
 	
    public InternalMarkupParser(TokenStream input, MarkupGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Markup";	
   	}
   	
   	@Override
   	protected MarkupGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMarkup
entryRuleMarkup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMarkupRule()); }
	 iv_ruleMarkup=ruleMarkup 
	 { $current=$iv_ruleMarkup.current; } 
	 EOF 
;

// Rule Markup
ruleMarkup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getMarkupAccess().getElementsMarkupElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleMarkupElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMarkupRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"MarkupElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleMarkupElement
entryRuleMarkupElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMarkupElementRule()); }
	 iv_ruleMarkupElement=ruleMarkupElement 
	 { $current=$iv_ruleMarkupElement.current; } 
	 EOF 
;

// Rule MarkupElement
ruleMarkupElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMarkupElementAccess().getFontElementParserRuleCall_0()); 
    }
    this_FontElement_0=ruleFontElement
    { 
        $current = $this_FontElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMarkupElementAccess().getNewLineElementParserRuleCall_1()); 
    }
    this_NewLineElement_1=ruleNewLineElement
    { 
        $current = $this_NewLineElement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMarkupElementAccess().getTextElementParserRuleCall_2()); 
    }
    this_TextElement_2=ruleTextElement
    { 
        $current = $this_TextElement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMarkupElementAccess().getFigElementParserRuleCall_3()); 
    }
    this_FigElement_3=ruleFigElement
    { 
        $current = $this_FigElement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMarkupElementAccess().getFigRefElementParserRuleCall_4()); 
    }
    this_FigRefElement_4=ruleFigRefElement
    { 
        $current = $this_FigRefElement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMarkupElementAccess().getNullElementParserRuleCall_5()); 
    }
    this_NullElement_5=ruleNullElement
    { 
        $current = $this_NullElement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMarkupElementAccess().getOclElementParserRuleCall_6()); 
    }
    this_OclElement_6=ruleOclElement
    { 
        $current = $this_OclElement_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTextElement
entryRuleTextElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextElementRule()); }
	 iv_ruleTextElement=ruleTextElement 
	 { $current=$iv_ruleTextElement.current; } 
	 EOF 
;

// Rule TextElement
ruleTextElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_text_0_1=RULE_ID
		{
			newLeafNode(lv_text_0_1, grammarAccess.getTextElementAccess().getTextIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextElementRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_1, 
        		"ID");
	    }

    |		lv_text_0_2=RULE_WORD
		{
			newLeafNode(lv_text_0_2, grammarAccess.getTextElementAccess().getTextWORDTerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextElementRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_2, 
        		"WORD");
	    }

    |		lv_text_0_3=RULE_WS
		{
			newLeafNode(lv_text_0_3, grammarAccess.getTextElementAccess().getTextWSTerminalRuleCall_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextElementRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_3, 
        		"WS");
	    }

)

)
)+
;





// Entry rule entryRuleNewLineElement
entryRuleNewLineElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewLineElementRule()); }
	 iv_ruleNewLineElement=ruleNewLineElement 
	 { $current=$iv_ruleNewLineElement.current; } 
	 EOF 
;

// Rule NewLineElement
ruleNewLineElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_text_0_0=RULE_NL
		{
			newLeafNode(lv_text_0_0, grammarAccess.getNewLineElementAccess().getTextNLTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewLineElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_0, 
        		"NL");
	    }

)
)
;





// Entry rule entryRuleFontElement
entryRuleFontElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFontElementRule()); }
	 iv_ruleFontElement=ruleFontElement 
	 { $current=$iv_ruleFontElement.current; } 
	 EOF 
;

// Rule FontElement
ruleFontElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_font_0_1=	'b[' 
    {
        newLeafNode(lv_font_0_1, grammarAccess.getFontElementAccess().getFontBKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFontElementRule());
	        }
       		setWithLastConsumed($current, "font", lv_font_0_1, null);
	    }

    |		lv_font_0_2=	'e[' 
    {
        newLeafNode(lv_font_0_2, grammarAccess.getFontElementAccess().getFontEKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFontElementRule());
	        }
       		setWithLastConsumed($current, "font", lv_font_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFontElementAccess().getElementsMarkupElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleMarkupElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFontElementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"MarkupElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFontElementAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleFigElement
entryRuleFigElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFigElementRule()); }
	 iv_ruleFigElement=ruleFigElement 
	 { $current=$iv_ruleFigElement.current; } 
	 EOF 
;

// Rule FigElement
ruleFigElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='fig[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFigElementAccess().getFigKeyword_0_0());
    }

    |(	otherlv_1='fig:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFigElementAccess().getFigKeyword_0_1_0());
    }
(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getFigElementAccess().getIdIDTerminalRuleCall_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFigElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"ID");
	    }

)
)	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFigElementAccess().getLeftSquareBracketKeyword_0_1_2());
    }
))(
(
		lv_src_4_0=RULE_STRING
		{
			newLeafNode(lv_src_4_0, grammarAccess.getFigElementAccess().getSrcSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFigElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"src",
        		lv_src_4_0, 
        		"STRING");
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFigElementAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleFigRefElement
entryRuleFigRefElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFigRefElementRule()); }
	 iv_ruleFigRefElement=ruleFigRefElement 
	 { $current=$iv_ruleFigRefElement.current; } 
	 EOF 
;

// Rule FigRefElement
ruleFigRefElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fig-[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFigRefElementAccess().getFigKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFigRefElementRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getFigRefElementAccess().getRefFigElementCrossReference_1_0()); 
	}

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFigRefElementAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleNullElement
entryRuleNullElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullElementRule()); }
	 iv_ruleNullElement=ruleNullElement 
	 { $current=$iv_ruleNullElement.current; } 
	 EOF 
;

// Rule NullElement
ruleNullElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullElementAccess().getNullElementAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullElementAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNullElementAccess().getElementsMarkupElementParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleMarkupElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNullElementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"MarkupElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNullElementAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleOclElement
entryRuleOclElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOclElementRule()); }
	 iv_ruleOclElement=ruleOclElement 
	 { $current=$iv_ruleOclElement.current; } 
	 EOF 
;

// Rule OclElement
ruleOclElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getOclElementAccess().getOclElementAction_0(),
            $current);
    }
)	otherlv_1='ocl[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOclElementAccess().getOclKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOclElementAccess().getElementsMarkupElementParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleMarkupElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOclElementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"MarkupElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOclElementAccess().getRightSquareBracketKeyword_3());
    }
)
;







RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WORD : ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'<'|'>'|'['|']')|~(('\\'|'['|']'|' '|'\t'|'\n'|'\r')))+;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'<'|'>')|~(('\\'|'"')))* '"';

RULE_TEXT : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'['|']')|~(('\\'|'\''|'['|']'|'\n')))* '\'';

RULE_NL : ('\n'|'\r') (RULE_WS* ('\n'|'\r'))*;

RULE_WS : (' '|'\t')+;

RULE_ANY_OTHER : .;


