/*
* generated by Xtext
*/
package org.eclipse.ocl.examples.xtext.base.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.ocl.examples.xtext.base.services.MarkupGrammarAccess;

public class MarkupParser extends AbstractContentAssistParser {
	
	@Inject
	private MarkupGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.ocl.examples.xtext.base.ui.contentassist.antlr.internal.InternalMarkupParser createParser() {
		org.eclipse.ocl.examples.xtext.base.ui.contentassist.antlr.internal.InternalMarkupParser result = new org.eclipse.ocl.examples.xtext.base.ui.contentassist.antlr.internal.InternalMarkupParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMarkupElementAccess().getAlternatives(), "rule__MarkupElement__Alternatives");
					put(grammarAccess.getStyleElementAccess().getAlternatives(), "rule__StyleElement__Alternatives");
					put(grammarAccess.getFontElementAccess().getGroup(), "rule__FontElement__Group__0");
					put(grammarAccess.getImageElementAccess().getGroup(), "rule__ImageElement__Group__0");
					put(grammarAccess.getImageElementAccess().getGroup_4(), "rule__ImageElement__Group_4__0");
					put(grammarAccess.getImageElementAccess().getGroup_5(), "rule__ImageElement__Group_5__0");
					put(grammarAccess.getStyleElementAccess().getGroup_0(), "rule__StyleElement__Group_0__0");
					put(grammarAccess.getStyleElementAccess().getGroup_1(), "rule__StyleElement__Group_1__0");
					put(grammarAccess.getRefElementAccess().getGroup(), "rule__RefElement__Group__0");
					put(grammarAccess.getMarkupAccess().getElementsAssignment(), "rule__Markup__ElementsAssignment");
					put(grammarAccess.getTextElementAccess().getTextAssignment(), "rule__TextElement__TextAssignment");
					put(grammarAccess.getNewLineElementAccess().getTextAssignment(), "rule__NewLineElement__TextAssignment");
					put(grammarAccess.getFontElementAccess().getFontAssignment_0(), "rule__FontElement__FontAssignment_0");
					put(grammarAccess.getFontElementAccess().getElementsAssignment_1(), "rule__FontElement__ElementsAssignment_1");
					put(grammarAccess.getImageElementAccess().getSrcAssignment_3(), "rule__ImageElement__SrcAssignment_3");
					put(grammarAccess.getImageElementAccess().getAltAssignment_4_2(), "rule__ImageElement__AltAssignment_4_2");
					put(grammarAccess.getImageElementAccess().getDefAssignment_5_2(), "rule__ImageElement__DefAssignment_5_2");
					put(grammarAccess.getStyleElementAccess().getStyleAssignment_0_0(), "rule__StyleElement__StyleAssignment_0_0");
					put(grammarAccess.getStyleElementAccess().getElementsAssignment_0_1(), "rule__StyleElement__ElementsAssignment_0_1");
					put(grammarAccess.getStyleElementAccess().getStyleAssignment_1_0(), "rule__StyleElement__StyleAssignment_1_0");
					put(grammarAccess.getStyleElementAccess().getElementsAssignment_1_1(), "rule__StyleElement__ElementsAssignment_1_1");
					put(grammarAccess.getRefElementAccess().getRefAssignment_1(), "rule__RefElement__RefAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.ocl.examples.xtext.base.ui.contentassist.antlr.internal.InternalMarkupParser typedParser = (org.eclipse.ocl.examples.xtext.base.ui.contentassist.antlr.internal.InternalMarkupParser) parser;
			typedParser.entryRuleMarkup();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public MarkupGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MarkupGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
