/*
* generated by Xtext
*/
package org.eclipse.ocl.examples.xtext.markup.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.ocl.examples.xtext.markup.services.MarkupGrammarAccess;

public class MarkupParser extends AbstractContentAssistParser {
	
	@Inject
	private MarkupGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.ocl.examples.xtext.markup.ui.contentassist.antlr.internal.InternalMarkupParser createParser() {
		org.eclipse.ocl.examples.xtext.markup.ui.contentassist.antlr.internal.InternalMarkupParser result = new org.eclipse.ocl.examples.xtext.markup.ui.contentassist.antlr.internal.InternalMarkupParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMarkupElementAccess().getAlternatives(), "rule__MarkupElement__Alternatives");
					put(grammarAccess.getTextElementAccess().getTextAlternatives_0(), "rule__TextElement__TextAlternatives_0");
					put(grammarAccess.getFontElementAccess().getFontAlternatives_0_0(), "rule__FontElement__FontAlternatives_0_0");
					put(grammarAccess.getFigElementAccess().getAlternatives_0(), "rule__FigElement__Alternatives_0");
					put(grammarAccess.getMarkupKeywordAccess().getAlternatives(), "rule__MarkupKeyword__Alternatives");
					put(grammarAccess.getFontElementAccess().getGroup(), "rule__FontElement__Group__0");
					put(grammarAccess.getFigElementAccess().getGroup(), "rule__FigElement__Group__0");
					put(grammarAccess.getFigElementAccess().getGroup_0_1(), "rule__FigElement__Group_0_1__0");
					put(grammarAccess.getFigRefElementAccess().getGroup(), "rule__FigRefElement__Group__0");
					put(grammarAccess.getNullElementAccess().getGroup(), "rule__NullElement__Group__0");
					put(grammarAccess.getOclElementAccess().getGroup(), "rule__OclElement__Group__0");
					put(grammarAccess.getMarkupAccess().getElementsAssignment(), "rule__Markup__ElementsAssignment");
					put(grammarAccess.getTextElementAccess().getTextAssignment(), "rule__TextElement__TextAssignment");
					put(grammarAccess.getNewLineElementAccess().getTextAssignment(), "rule__NewLineElement__TextAssignment");
					put(grammarAccess.getFontElementAccess().getFontAssignment_0(), "rule__FontElement__FontAssignment_0");
					put(grammarAccess.getFontElementAccess().getElementsAssignment_1(), "rule__FontElement__ElementsAssignment_1");
					put(grammarAccess.getFigElementAccess().getIdAssignment_0_1_1(), "rule__FigElement__IdAssignment_0_1_1");
					put(grammarAccess.getFigElementAccess().getSrcAssignment_1(), "rule__FigElement__SrcAssignment_1");
					put(grammarAccess.getFigRefElementAccess().getRefAssignment_1(), "rule__FigRefElement__RefAssignment_1");
					put(grammarAccess.getNullElementAccess().getElementsAssignment_2(), "rule__NullElement__ElementsAssignment_2");
					put(grammarAccess.getOclElementAccess().getElementsAssignment_2(), "rule__OclElement__ElementsAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.ocl.examples.xtext.markup.ui.contentassist.antlr.internal.InternalMarkupParser typedParser = (org.eclipse.ocl.examples.xtext.markup.ui.contentassist.antlr.internal.InternalMarkupParser) parser;
			typedParser.entryRuleMarkup();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public MarkupGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MarkupGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
