/*
* generated by Xtext
*/
grammar InternalMarkup;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.ocl.examples.xtext.markup.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.ocl.examples.xtext.markup.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.ocl.examples.xtext.markup.services.MarkupGrammarAccess;

}

@parser::members {
 
 	private MarkupGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MarkupGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMarkup
entryRuleMarkup 
:
{ before(grammarAccess.getMarkupRule()); }
	 ruleMarkup
{ after(grammarAccess.getMarkupRule()); } 
	 EOF 
;

// Rule Markup
ruleMarkup
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMarkupAccess().getElementsAssignment()); }
(rule__Markup__ElementsAssignment)*
{ after(grammarAccess.getMarkupAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMarkupElement
entryRuleMarkupElement 
:
{ before(grammarAccess.getMarkupElementRule()); }
	 ruleMarkupElement
{ after(grammarAccess.getMarkupElementRule()); } 
	 EOF 
;

// Rule MarkupElement
ruleMarkupElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMarkupElementAccess().getAlternatives()); }
(rule__MarkupElement__Alternatives)
{ after(grammarAccess.getMarkupElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextElement
entryRuleTextElement 
:
{ before(grammarAccess.getTextElementRule()); }
	 ruleTextElement
{ after(grammarAccess.getTextElementRule()); } 
	 EOF 
;

// Rule TextElement
ruleTextElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getTextElementAccess().getTextAssignment()); }
(rule__TextElement__TextAssignment)
{ after(grammarAccess.getTextElementAccess().getTextAssignment()); }
)
(
{ before(grammarAccess.getTextElementAccess().getTextAssignment()); }
(rule__TextElement__TextAssignment)*
{ after(grammarAccess.getTextElementAccess().getTextAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNewLineElement
entryRuleNewLineElement 
:
{ before(grammarAccess.getNewLineElementRule()); }
	 ruleNewLineElement
{ after(grammarAccess.getNewLineElementRule()); } 
	 EOF 
;

// Rule NewLineElement
ruleNewLineElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNewLineElementAccess().getTextAssignment()); }
(rule__NewLineElement__TextAssignment)
{ after(grammarAccess.getNewLineElementAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFontElement
entryRuleFontElement 
:
{ before(grammarAccess.getFontElementRule()); }
	 ruleFontElement
{ after(grammarAccess.getFontElementRule()); } 
	 EOF 
;

// Rule FontElement
ruleFontElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFontElementAccess().getGroup()); }
(rule__FontElement__Group__0)
{ after(grammarAccess.getFontElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFigElement
entryRuleFigElement 
:
{ before(grammarAccess.getFigElementRule()); }
	 ruleFigElement
{ after(grammarAccess.getFigElementRule()); } 
	 EOF 
;

// Rule FigElement
ruleFigElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFigElementAccess().getGroup()); }
(rule__FigElement__Group__0)
{ after(grammarAccess.getFigElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFigRefElement
entryRuleFigRefElement 
:
{ before(grammarAccess.getFigRefElementRule()); }
	 ruleFigRefElement
{ after(grammarAccess.getFigRefElementRule()); } 
	 EOF 
;

// Rule FigRefElement
ruleFigRefElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFigRefElementAccess().getGroup()); }
(rule__FigRefElement__Group__0)
{ after(grammarAccess.getFigRefElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullElement
entryRuleNullElement 
:
{ before(grammarAccess.getNullElementRule()); }
	 ruleNullElement
{ after(grammarAccess.getNullElementRule()); } 
	 EOF 
;

// Rule NullElement
ruleNullElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullElementAccess().getGroup()); }
(rule__NullElement__Group__0)
{ after(grammarAccess.getNullElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOclElement
entryRuleOclElement 
:
{ before(grammarAccess.getOclElementRule()); }
	 ruleOclElement
{ after(grammarAccess.getOclElementRule()); } 
	 EOF 
;

// Rule OclElement
ruleOclElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOclElementAccess().getGroup()); }
(rule__OclElement__Group__0)
{ after(grammarAccess.getOclElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MarkupElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupElementAccess().getFontElementParserRuleCall_0()); }
	ruleFontElement
{ after(grammarAccess.getMarkupElementAccess().getFontElementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMarkupElementAccess().getNewLineElementParserRuleCall_1()); }
	ruleNewLineElement
{ after(grammarAccess.getMarkupElementAccess().getNewLineElementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMarkupElementAccess().getTextElementParserRuleCall_2()); }
	ruleTextElement
{ after(grammarAccess.getMarkupElementAccess().getTextElementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getMarkupElementAccess().getFigElementParserRuleCall_3()); }
	ruleFigElement
{ after(grammarAccess.getMarkupElementAccess().getFigElementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getMarkupElementAccess().getFigRefElementParserRuleCall_4()); }
	ruleFigRefElement
{ after(grammarAccess.getMarkupElementAccess().getFigRefElementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getMarkupElementAccess().getNullElementParserRuleCall_5()); }
	ruleNullElement
{ after(grammarAccess.getMarkupElementAccess().getNullElementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getMarkupElementAccess().getOclElementParserRuleCall_6()); }
	ruleOclElement
{ after(grammarAccess.getMarkupElementAccess().getOclElementParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextElement__TextAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextElementAccess().getTextIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getTextElementAccess().getTextIDTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getTextElementAccess().getTextWORDTerminalRuleCall_0_1()); }
	RULE_WORD
{ after(grammarAccess.getTextElementAccess().getTextWORDTerminalRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getTextElementAccess().getTextWSTerminalRuleCall_0_2()); }
	RULE_WS
{ after(grammarAccess.getTextElementAccess().getTextWSTerminalRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FontElement__FontAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontElementAccess().getFontBKeyword_0_0_0()); }

	'b[' 

{ after(grammarAccess.getFontElementAccess().getFontBKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getFontElementAccess().getFontEKeyword_0_0_1()); }

	'e[' 

{ after(grammarAccess.getFontElementAccess().getFontEKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FigElement__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigElementAccess().getFigKeyword_0_0()); }

	'fig[' 

{ after(grammarAccess.getFigElementAccess().getFigKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getFigElementAccess().getGroup_0_1()); }
(rule__FigElement__Group_0_1__0)
{ after(grammarAccess.getFigElementAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__FontElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FontElement__Group__0__Impl
	rule__FontElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FontElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontElementAccess().getFontAssignment_0()); }
(rule__FontElement__FontAssignment_0)
{ after(grammarAccess.getFontElementAccess().getFontAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FontElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FontElement__Group__1__Impl
	rule__FontElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FontElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontElementAccess().getElementsAssignment_1()); }
(rule__FontElement__ElementsAssignment_1)*
{ after(grammarAccess.getFontElementAccess().getElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FontElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FontElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FontElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontElementAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getFontElementAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FigElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FigElement__Group__0__Impl
	rule__FigElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FigElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigElementAccess().getAlternatives_0()); }
(rule__FigElement__Alternatives_0)
{ after(grammarAccess.getFigElementAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FigElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FigElement__Group__1__Impl
	rule__FigElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FigElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigElementAccess().getSrcAssignment_1()); }
(rule__FigElement__SrcAssignment_1)
{ after(grammarAccess.getFigElementAccess().getSrcAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FigElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FigElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FigElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigElementAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getFigElementAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FigElement__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FigElement__Group_0_1__0__Impl
	rule__FigElement__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FigElement__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigElementAccess().getFigKeyword_0_1_0()); }

	'fig:' 

{ after(grammarAccess.getFigElementAccess().getFigKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FigElement__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FigElement__Group_0_1__1__Impl
	rule__FigElement__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FigElement__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigElementAccess().getIdAssignment_0_1_1()); }
(rule__FigElement__IdAssignment_0_1_1)
{ after(grammarAccess.getFigElementAccess().getIdAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FigElement__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FigElement__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FigElement__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigElementAccess().getLeftSquareBracketKeyword_0_1_2()); }

	'[' 

{ after(grammarAccess.getFigElementAccess().getLeftSquareBracketKeyword_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FigRefElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FigRefElement__Group__0__Impl
	rule__FigRefElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FigRefElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigRefElementAccess().getFigKeyword_0()); }

	'fig-[' 

{ after(grammarAccess.getFigRefElementAccess().getFigKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FigRefElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FigRefElement__Group__1__Impl
	rule__FigRefElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FigRefElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigRefElementAccess().getRefAssignment_1()); }
(rule__FigRefElement__RefAssignment_1)
{ after(grammarAccess.getFigRefElementAccess().getRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FigRefElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FigRefElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FigRefElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigRefElementAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getFigRefElementAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NullElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullElement__Group__0__Impl
	rule__NullElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullElementAccess().getNullElementAction_0()); }
(

)
{ after(grammarAccess.getNullElementAccess().getNullElementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullElement__Group__1__Impl
	rule__NullElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullElementAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getNullElementAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullElement__Group__2__Impl
	rule__NullElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NullElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullElementAccess().getElementsAssignment_2()); }
(rule__NullElement__ElementsAssignment_2)*
{ after(grammarAccess.getNullElementAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullElement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullElement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullElement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullElementAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getNullElementAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OclElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OclElement__Group__0__Impl
	rule__OclElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OclElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOclElementAccess().getOclElementAction_0()); }
(

)
{ after(grammarAccess.getOclElementAccess().getOclElementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OclElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OclElement__Group__1__Impl
	rule__OclElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OclElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOclElementAccess().getOclKeyword_1()); }

	'ocl[' 

{ after(grammarAccess.getOclElementAccess().getOclKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OclElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OclElement__Group__2__Impl
	rule__OclElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OclElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOclElementAccess().getElementsAssignment_2()); }
(rule__OclElement__ElementsAssignment_2)*
{ after(grammarAccess.getOclElementAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OclElement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OclElement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OclElement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOclElementAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getOclElementAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Markup__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkupAccess().getElementsMarkupElementParserRuleCall_0()); }
	ruleMarkupElement{ after(grammarAccess.getMarkupAccess().getElementsMarkupElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextElement__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextElementAccess().getTextAlternatives_0()); }
(rule__TextElement__TextAlternatives_0)
{ after(grammarAccess.getTextElementAccess().getTextAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewLineElement__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewLineElementAccess().getTextNLTerminalRuleCall_0()); }
	RULE_NL{ after(grammarAccess.getNewLineElementAccess().getTextNLTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FontElement__FontAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontElementAccess().getFontAlternatives_0_0()); }
(rule__FontElement__FontAlternatives_0_0)
{ after(grammarAccess.getFontElementAccess().getFontAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FontElement__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFontElementAccess().getElementsMarkupElementParserRuleCall_1_0()); }
	ruleMarkupElement{ after(grammarAccess.getFontElementAccess().getElementsMarkupElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FigElement__IdAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigElementAccess().getIdIDTerminalRuleCall_0_1_1_0()); }
	RULE_ID{ after(grammarAccess.getFigElementAccess().getIdIDTerminalRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FigElement__SrcAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigElementAccess().getSrcSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getFigElementAccess().getSrcSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FigRefElement__RefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFigRefElementAccess().getRefFigElementCrossReference_1_0()); }
(
{ before(grammarAccess.getFigRefElementAccess().getRefFigElementIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getFigRefElementAccess().getRefFigElementIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getFigRefElementAccess().getRefFigElementCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullElement__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullElementAccess().getElementsMarkupElementParserRuleCall_2_0()); }
	ruleMarkupElement{ after(grammarAccess.getNullElementAccess().getElementsMarkupElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OclElement__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOclElementAccess().getElementsMarkupElementParserRuleCall_2_0()); }
	ruleMarkupElement{ after(grammarAccess.getOclElementAccess().getElementsMarkupElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WORD : ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'<'|'>'|'['|']')|~(('\\'|'['|']'|' '|'\t'|'\n'|'\r')))+;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'<'|'>')|~(('\\'|'"')))* '"';

RULE_TEXT : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'['|']')|~(('\\'|'\''|'['|']'|'\n')))* '\'';

RULE_NL : ('\n'|'\r') (RULE_WS* ('\n'|'\r'))*;

RULE_WS : (' '|'\t')+;

RULE_ANY_OTHER : .;


