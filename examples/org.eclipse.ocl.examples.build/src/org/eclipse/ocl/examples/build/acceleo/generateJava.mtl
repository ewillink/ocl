[comment encoding = UTF-8 /]
[module generateJava('http://www.eclipse.org/ocl/3.2.0/Pivot','http://www.eclipse.org/emf/2002/Ecore')/]

[template public generate(pkg : Package) ? (pkg.eContainer() <> null)]
[comment @main /]
[for (type : Type | pkg.ownedType->sortedBy(moniker))]
[file ('operations/' + type.name + 'Operations.java', false, 'UTF-8')]
package [pkg.name/].operations;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.util.WrappedException;
import org.eclipse.ocl.examples.pivot.InvalidValueException;
import org.eclipse.ocl.examples.pivot.evaluation.EvaluationClass;
import org.eclipse.ocl.examples.pivot.evaluation.EvaluationIteration;
import org.eclipse.ocl.examples.pivot.evaluation.EvaluationManager;
import org.eclipse.ocl.examples.pivot.evaluation.EvaluationOperation0;
import org.eclipse.ocl.examples.pivot.evaluation.EvaluationOperation1;
import org.eclipse.ocl.examples.pivot.evaluation.EvaluationOperation2;
import org.eclipse.ocl.examples.pivot.evaluation.EvaluationOperationN;
import org.eclipse.ocl.examples.pivot.evaluation.ecore.EcoreEvaluationManager;
import org.eclipse.ocl.examples.pivot.values.*;
import [pkg.name/].[type.name/];

@SuppressWarnings("unused")
public class [type.name/]Operations
{
	public static void suppressThrowWarnings()  throws InvalidValueException {}

[for (rule : Constraint | type.ownedRule->sortedBy(name)) before ('\n') separator ('\n')]
	[generateInvariant(type, rule)/]
[/for]
[if (type.oclIsKindOf(Class))]
[for (operation : Operation | type.oclAsType(Class).ownedOperation->sortedBy(moniker)) before ('\n') separator ('\n')]
[for (rule : Constraint | operation.ownedRule) separator ('\n')]
[if (rule.stereotype = 'body')]
	public static [operation.type.name/] [operation.name/]([type.name/] self[for (parameter : Parameter | operation.ownedParameter)], [parameter.type.name/] [parameter.name/][/for]) {
		EvaluationManager evaluationManager = EcoreEvaluationManager.INSTANCE;
		EvaluationOperation[getAritySuffix(operation.ownedParameter->size())/] codeGen = [type.name + '_' + operation.name + '_' + rule.stereotype + '_' + rule.name/].INSTANCE;
		try {
			Value result = codeGen.evaluate(evaluationManager, evaluationManager.valueOf(self)[for (parameter : Parameter | operation.ownedParameter)], evaluationManager.valueOf([parameter.name/])[/for]);
			return ([operation.type.name/]) evaluationManager.getEcoreValueOf(result);
		} catch (InvalidValueException e) {
			throw new WrappedException(e);
		}
	}

[/if]
	[generateFeatureConstraint(type, operation, rule)/]
[/for]
[/for]
[for (property : Property | type.oclAsType(Class).ownedAttribute->sortedBy(name)) before ('\n') separator ('\n')]
[for (rule : Constraint | property.ownedRule) separator ('\n')]
	[generateFeatureConstraint(type, property, rule)/]
[/for]
[/for]
[/if]
}
[/file]
[/for]
[/template]

[template public generateInvariant(type : Type, constraint : Constraint)]
[let className : String = type.name + '_inv_' + constraint.name]
/** 
 * Implementation of the [type.name/] '[constraint.name/]' invariant.
 *
 * [constraint.specification.toString()/]
 */
[generateSpecification(className, constraint.specification)/][/let][/template]

[template public generateFeatureConstraint(type : Type, feature : Feature, constraint : Constraint)]
[let className : String = type.name + '_' + feature.name + '_' + constraint.stereotype + '_' + constraint.name]
/** 
 * Implementation of the [type.name/]::[feature.name/] '[constraint.name/]' <[constraint.stereotype/]>.
 *
 * [constraint.specification.toString()/]
 */
[generateSpecification(className, constraint.specification)/][/let][/template]

[template public generateSpecification(className : String, specification : ValueSpecification)]
public static class [className/] extends EvaluationOperation
{
	public Value evaluate(EvaluationManager evaluationManager, Value sourceValue, Value... argValues) throws InvalidValueException {
		return null;
	}
}[/template]

[template public generateSpecification(className : String, specification : ExpressionInOcl)]
[let arity : Integer = specification.parameterVariable->size()]
public static class [className/] extends EvaluationOperation[getAritySuffix(arity)/]
{
	public static [className/] INSTANCE = new [className/]();

	public Value evaluate(EvaluationManager evaluationManager, Value sourceValue[if specification.parameterVariable->notEmpty()]
[for (i : Integer | Sequence{1..arity})]
, Value argument[i/][/for][/if]) throws InvalidValueException {
		Value [getSymbolName(specification.contextVariable)/] = sourceValue;		// self
[if specification.parameterVariable->notEmpty()]
[for (i : Integer | Sequence{1..arity})]
		Value [getSymbolName(specification.parameterVariable->at(i))/] = argument[i/];	// parameter: [specification.parameterVariable->at(i).name/]
[/for]  
[/if]  
		[generateJava('Value result', specification.bodyExpression)/]
		return result;
	}
}[/let][/template]

[template public generateJava(result : String, ast : BooleanLiteralExp)]
[result/] = evaluationManager.booleanValueOf([if (ast.booleanSymbol)]true[else]false[/if]);[/template]

[template public generateJava(result : String, ast : CollectionLiteralExp)]
[let listVarName : String = 'list_'+getSymbolName(ast)]
[let resultVarName : String = 'result_'+getSymbolName(ast)]
List<Value> [listVarName/] = new ArrayList<Value>(); 
[for (part : CollectionLiteralPart | ast.part)]
[generateJava(listVarName, part)/]
[/for]
[result/] = evaluationManager.createCollectionValue([getCollectionKind(ast.kind.toString())/], [listVarName/]);[/let][/let][/template]

[template public generateJava(result : String, item : CollectionItem)]
[let itemVarName : String = 'item_'+getSymbolName(item)]
[let itemVarDecl : String = 'Value '+itemVarName]
[generateJava(itemVarDecl, item.item)/]
[result/].add([itemVarName/]);[/let][/let][/template]

[template public generateJava(result : String, range : CollectionRange)]
[let firstVarName : String = 'first_'+getSymbolName(range)]
[let lastVarName : String = 'last_'+getSymbolName(range)]
[let startVarName : String = 'start_'+getSymbolName(range)]
[let endVarName : String = 'end_'+getSymbolName(range)]
[let deltaVarName : String = 'delta_'+getSymbolName(range)]
[let firstVarDecl : String = 'IntegerValue '+firstVarName]
[let lastVarDecl : String = 'IntegerValue '+lastVarName]
[generateJava(firstVarDecl, range.first)/]
[generateJava(lastVarDecl, range.last)/]
int [startVarName/] = [firstVarName/].asInteger();
int [endVarName/] = [lastVarName/].asInteger();
int [deltaVarName/] = [startVarName/] > [endVarName/] ? -1 :1;
[result/].add([firstVarName/]);
for (int [getSymbolName(range)/] = [startVarName/]; [getSymbolName(range)/] != [endVarName/]; [getSymbolName(range)/] += [deltaVarName/]) {
	[result/].add(evaluationManager.integerValueOf([getSymbolName(range)/]));
}[/let][/let][/let][/let][/let][/let][/let][/template]

[template public generateJava(result : String, ast : Element)]
[result/] = <[ast.eClass().name/]>;[/template]

[template public generateJava(result : String, ast : IfExp)]
[let condVarName : String = 'if_'+getSymbolName(ast)]
[let resultVarName : String = 'result_'+getSymbolName(ast)]
[let condVarDecl : String = 'Value '+condVarName]
Value [resultVarName/];
[generateJava(condVarDecl, ast.condition)/]
if ([condVarName/].isTrue()) {
	[generateJava(resultVarName, ast.thenExpression)/]
}
else if ([condVarName/].isFalse()) {
	[generateJava(resultVarName, ast.elseExpression)/]
}
else if ([condVarName/].isNull()) {
	[resultVarName/] = evaluationManager.throwInvalidValueException("null if condition");
}
else {
	[resultVarName/] = evaluationManager.throwInvalidValueException("invalid if condition");
}
[result/] = [resultVarName/];[/let][/let][/let][/template]

[template public generateJava(result : String, ast : IntegerLiteralExp)]
[result/] = evaluationManager.integerValueOf([ast.integerSymbol/]);[/template]

[template public generateJava(result : String, ast : InvalidLiteralExp)]
[result/] = evaluationManager.throwInvalidValueException("invalid literal");[/template]

[template public generateJava(result : String, ast : IterateExp)]
[let arity : Integer = ast.iterator->size()]
[let leftVarName : String = getSymbolName(ast.source)]
[let accVarName : String = getSymbolName(ast.result)]
[let bodyName : String = 'body_'+getSymbolName(ast)]
[let leftVarDecl : String = 'Value '+leftVarName]
[let accVarDecl : String = 'Value '+accVarName]
[generateJava(leftVarDecl, ast.source)/]
[generateJava(accVarDecl, ast.result.initExpression)/]

/** 
 * Implementation of the iterate body.
 *
 * [ast._'body'.toString()/]
 */
EvaluationOperation[getAritySuffix(arity)/] [bodyName/] = new EvaluationOperation[getAritySuffix(arity)/]()
{
	public Value evaluate(EvaluationManager evaluationManager, Value sourceValue[for (i : Integer | Sequence{1..arity})]
, Value iterator[i/][/for]) throws InvalidValueException {
		Value [accVarName/] = sourceValue;	// accumulator: [ast.result.name/]
[for (i : Integer | Sequence{1..arity})]
		Value [getSymbolName(ast.iterator->at(i))/] = iterator[i/];	// iterator: [ast.iterator->at(i).name/]
[/for]  
		[generateJava('Value result', ast._'body')/]
		return result;
	}
};
EvaluationIteration static_[getSymbolName(ast.source)/] = evaluationManager.lookupIteration("[ast.referredIteration.moniker/]");
EvaluationClass type_[getSymbolName(ast.source)/] = evaluationManager.typeOf([getSymbolName(ast.source)/]);
EvaluationIteration dynamic_[getSymbolName(ast.source)/] = type_[getSymbolName(ast.source)/].lookupOperation(static_[getSymbolName(ast.source)/]);
[result/] = dynamic_[getSymbolName(ast.source)/].evaluate(evaluationManager, [getSymbolName(ast.source)/], [accVarName/], [bodyName/]);[/let][/let][/let][/let][/let][/let][/template]

[template public generateJava(result : String, ast : IteratorExp)]
[let arity : Integer = ast.iterator->size()]
[let leftVarName : String = getSymbolName(ast.source)]
[let bodyVarName : String = 'body_'+getSymbolName(ast)]
[let leftVarDecl : String = 'Value '+leftVarName]
[generateJava(leftVarDecl, ast.source)/]

/** 
 * Implementation of the iterator body.
 *
 * [ast._'body'.toString()/]
 */
EvaluationOperation[getAritySuffix(arity)/] [bodyVarName/] = new EvaluationOperation[getAritySuffix(arity)/]()
{
	public Value evaluate(EvaluationManager evaluationManager, Value sourceValue[for (i : Integer | Sequence{1..arity})]
, Value iterator[i/][/for]) throws InvalidValueException {
[for (i : Integer | Sequence{1..arity})]
		Value [getSymbolName(ast.iterator->at(i))/] = iterator[i/];	// iterator: [ast.iterator->at(i).name/]
[/for]  
		[generateJava('Value result', ast._'body')/]
		return result;
	}
};
EvaluationIteration static_[getSymbolName(ast.source)/] = evaluationManager.lookupIteration("[ast.referredIteration.moniker/]");
EvaluationClass type_[getSymbolName(ast.source)/] = evaluationManager.typeOf([getSymbolName(ast.source)/]);
EvaluationIteration dynamic_[getSymbolName(ast.source)/] = type_[getSymbolName(ast.source)/].lookupOperation(static_[getSymbolName(ast.source)/]);
[result/] = dynamic_[getSymbolName(ast.source)/].evaluate(evaluationManager, [getSymbolName(ast.source)/], null, [bodyVarName/]);[/let][/let][/let][/let][/template]

[template public generateJava(result : String, ast : LetExp)]
[let letVarName : String = getSymbolName(ast.variable)]
[let letVarDecl : String = 'final Value '+letVarName]
[generateJava(letVarDecl, ast.variable.initExpression)/]
[generateJava(result, ast._in)/][/let][/let][/template]

[template public generateJava(result : String, ast : NullLiteralExp)]
[result/] = evaluationManager.getNull();[/template]

[template public generateJava(result : String, ast : OperationCallExp) ? ((ast.referredOperation.class.name = 'Boolean') and (ast.referredOperation.ownedParameter->size() = 1))]
[let leftVarName : String = getSymbolName(ast.source)]
[let rightVarName : String = getSymbolName(ast.argument->at(1))]
Value [leftVarName/];
try {
	suppressThrowWarnings();
	[generateJava(leftVarName, ast.source)/]
} catch (InvalidValueException e) {
	[leftVarName/] = evaluationManager.getInvalid();
}
Value [rightVarName/];
try {
	suppressThrowWarnings();
	[generateJava(rightVarName, ast.argument->at(1))/]
} catch (InvalidValueException e) {
	[rightVarName/] = evaluationManager.getInvalid();
}
[generateCall(result, ast)/][/let][/let][/template]

[template public generateJava(result : String, ast : OperationCallExp) ? ((ast.referredOperation.class.name <> 'Boolean') or (ast.referredOperation.ownedParameter->size() <> 1))]
[let leftVarDecl : String = 'Value '+getSymbolName(ast.source)]
[generateJava(leftVarDecl, ast.source)/]
[for (argument : OclExpression | ast.argument)]
[let argVarDecl : String = 'Value '+getSymbolName(argument)]
[generateJava(argVarDecl, argument)/]
[/let]
[/for]
[generateCall(result, ast)/][/let][/template]

[template public generateCall(result : String, ast : OperationCallExp)]
[let arity : Integer = ast.referredOperation.ownedParameter->size()]
EvaluationOperation[getAritySuffix(arity)/] static_[getSymbolName(ast.source)/] = evaluationManager.lookupOperation[getAritySuffix(arity)/]("[ast.referredOperation.moniker/]");
EvaluationClass type_[getSymbolName(ast.source)/] = evaluationManager.typeOf([getSymbolName(ast.source)/][if arity > 0]
[for (index : Integer | Sequence{1..arity})]
[if ast.referredOperation.ownedParameter->at(index).type.oclIsKindOf(SelfType)]
, [getSymbolName(ast.argument->at(index))/][/if][/for][/if]);
EvaluationOperation[getAritySuffix(arity)/] dynamic_[getSymbolName(ast.source)/] = type_[getSymbolName(ast.source)/].lookupOperation(static_[getSymbolName(ast.source)/]);
[result/] = dynamic_[getSymbolName(ast.source)/].evaluate(evaluationManager, [getSymbolName(ast.source)/][for (argument : OclExpression | ast.argument) before (', ') separator (', ')][getSymbolName(argument)/][/for]);[/let][/template]

[template public generateJava(result : String, ast : PropertyCallExp)]
[let leftVarName : String = getSymbolName(ast.source)]
[let leftVarDecl : String = 'Value '+leftVarName]
[generateJava(leftVarDecl, ast.source)/]
[result/] = evaluationManager.navigate([leftVarName/], "[ast.referredProperty.moniker/]");[/let][/let][/template]

[template public generateJava(result : String, ast : RealLiteralExp)]
[result/] = evaluationManager.realValueOf([ast.realSymbol/]);[/template]

[template public generateJava(result : String, ast : StringLiteralExp)]
[result/] = evaluationManager.stringValueOf("[javaString(ast.stringSymbol)/]");[/template]

[template public generateJava(result : String, ast : TupleLiteralExp)]
[let mapVarName : String = getSymbolName(ast)]
Map<String, Value> [mapVarName/] = new HashMap<String, Value>();
[for (part : TupleLiteralPart | ast.part)]
[let partVarDecl : String = 'Value '+getSymbolName(part)]
[generateJava(partVarDecl, part.initExpression)/]
[mapVarName/].put("[javaString(part.name)/]", [getSymbolName(part)/]);
[/let]
[/for]
[result/] = evaluationManager.tupleFor("[ast.type.moniker/]", [mapVarName/]);[/let][/template]

[template public generateJava(result : String, ast : TypeExp)]
[result/] = evaluationManager.typeOf("[ast.referredType.moniker/]");[/template]

[template public generateJava(result : String, ast : UnlimitedNaturalLiteralExp)]
[if ast.unlimitedNaturalSymbol >= 0][result/] = evaluationManager.integerValueOf([ast.unlimitedNaturalSymbol/]);[else][result/] = evaluationManager.getUnlimited();[/if][/template]

[template public generateJava(result : String, ast : VariableExp)]
[result/] = [getSymbolName(ast.referredVariable)/];[/template]

[query public getCollectionKind(s : String) : String = 
if s = 'Bag' then 'org.eclipse.ocl.examples.pivot.CollectionKind.BAG'
else if s = 'OrderedSet' then 'org.eclipse.ocl.examples.pivot.CollectionKind.ORDERED_SET' 
else if s = 'Sequence' then 'org.eclipse.ocl.examples.pivot.CollectionKind.SEQUENCE' 
else if s = 'Set' then 'org.eclipse.ocl.examples.pivot.CollectionKind.SET' 
else 'org.eclipse.ocl.examples.pivot.CollectionKind.COLLECTION' endif endif endif endif /]

[query public getAritySuffix(arity : Integer) : String = 
if arity > 2 then 'N' else arity.toString() endif/]

[query public getSymbolName(elem : Element) : String = 
invoke('org.eclipse.ocl.examples.build.acceleo.NameQueries', 'getSymbolName(java.lang.Object)', Sequence{elem}) /]

[query public isBinarySelf(callExp : OperationCallExp) : Boolean = 
invoke('org.eclipse.ocl.examples.build.acceleo.NameQueries', 'isBinarySelf(org.eclipse.ocl.examples.pivot.OperationCallExp)', Sequence{callExp}) /]

[query public javaString(rawString : String) : String = 
invoke('org.eclipse.xtext.util.Strings', 'convertToJavaString(java.lang.String)', Sequence{rawString}) /]
